local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "üêï DOG HUB | Universal",
   LoadingTitle = "DOG HUB",
   LoadingSubtitle = "by DogTeam",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "DogHubConfig",
      FileName = "DogHub Config"
   },
   Discord = {
      Enabled = true,
      Invite = "YourDiscordInvite",
      RememberJoins = true
   },
   KeySystem = true,
   KeySettings = {
      Title = "DOG HUB | Key System",
      Subtitle = "Key Verification",
      Note = "Key In Discord Server",
      FileName = "DogHubKey",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"PREMIUM2024", "RELEASE"} 
   }
})

-- Welcome Notification
Rayfield:Notify({
   Title = "Welcome to DOG HUB!",
   Content = "Script loaded successfully",
   Duration = 6.5,
   Image = nil,
   Actions = {
      Ignore = {
         Name = "Okay!",
         Callback = function()
            print("Notification acknowledged")
         end
      },
   },
})

-- ESPTab
local ESPTab = Window:CreateTab("üëÅ ESP", nil)
local ESPSection = ESPTab:CreateSection("ESP Features")

-- Variables to track ESP states
_G.skeletonEnabled = false
_G.arrowsEnabled = false
_G.radarEnabled = false

-- Function to cleanup ESP features
local function cleanupESP()
    if _G.Skeletons then
        for _, skeleton in pairs(_G.Skeletons) do
            pcall(function() skeleton:Remove() end)
        end
        _G.Skeletons = nil
    end
    
    if _G.ArrowsObjects then
        for _, arrow in pairs(_G.ArrowsObjects) do
            pcall(function() arrow:Remove() end)
        end
        _G.ArrowsObjects = nil
    end
    
    if _G.RadarObjects then
        for _, obj in pairs(_G.RadarObjects) do
            pcall(function() obj:Remove() end)
        end
        _G.RadarObjects = nil
    end
end

-- Skeleton ESP
local SkeletonToggle = ESPTab:CreateToggle({
    Name = "Skeleton ESP",
    CurrentValue = false,
    Flag = "skeletonToggle",
    Callback = function(Value)
        cleanupESP()
        _G.skeletonEnabled = Value
        if Value then
            local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Blissful4992/ESPs/main/UniversalSkeleton.lua"))()
            _G.Skeletons = {}
            
            for _, Player in next, game.Players:GetChildren() do
                if Player ~= game.Players.LocalPlayer then
                    table.insert(_G.Skeletons, Library:NewSkeleton(Player, true))
                end
            end
            
            game.Players.PlayerAdded:Connect(function(Player)
                if _G.skeletonEnabled and Player ~= game.Players.LocalPlayer then
                    table.insert(_G.Skeletons, Library:NewSkeleton(Player, true))
                end
            end)
        end
    end,
})

-- Arrows ESP
local ArrowsToggle = ESPTab:CreateToggle({
    Name = "Arrows",
    CurrentValue = false,
    Flag = "arrowsToggle",
    Callback = function(Value)
        cleanupESP()
        _G.arrowsEnabled = Value
        if Value then
            _G.ArrowsObjects = {}
            
            -- Arrows configuration
            local DistFromCenter = 80
            local TriangleHeight = 16
            local TriangleWidth = 16
            
            local function ShowArrow(player)
                if player == game.Players.LocalPlayer then return end
                
                local arrow = Drawing.new("Triangle")
                arrow.Visible = false
                arrow.Color = Color3.fromRGB(255, 255, 255)
                arrow.Filled = true
                arrow.Thickness = 1
                arrow.Transparency = 1
                table.insert(_G.ArrowsObjects, arrow)
                
                game:GetService("RunService").RenderStepped:Connect(function()
                    if not _G.arrowsEnabled then
                        arrow.Visible = false
                        return
                    end
                    
                    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                        local pos, vis = workspace.CurrentCamera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
                        if not vis then
                            -- Arrow pointing logic here
                            arrow.Visible = true
                        else
                            arrow.Visible = false
                        end
                    else
                        arrow.Visible = false
                    end
                end)
            end
            
            for _, player in pairs(game.Players:GetPlayers()) do
                ShowArrow(player)
            end
            
            game.Players.PlayerAdded:Connect(function(player)
                if _G.arrowsEnabled then
                    ShowArrow(player)
                end
            end)
        end
    end,
})

-- Radar ESP
local RadarToggle = ESPTab:CreateToggle({
    Name = "Radar",
    CurrentValue = false,
    Flag = "radarToggle",
    Callback = function(Value)
        cleanupESP()
        _G.radarEnabled = Value
        if Value then
            _G.RadarObjects = {}
            -- Radar code here
            loadstring(game:HttpGet("https://pastebin.com/raw/wRnsJeid"))()
            -- Add radar objects to _G.RadarObjects table
        end
    end,
})

-- Misc Tab
local MiscTab = Window:CreateTab("üõ† Misc", nil)
local MiscSection = MiscTab:CreateSection("Misc Features")

-- Auto Loot
local AutoLoot = MiscTab:CreateToggle({
    Name = "Auto Loot",
    CurrentValue = false,
    Flag = "autoLootToggle",
    Callback = function(Value)
        _G.autoLootEnabled = Value
    end,
})

-- Auto Minigame
local AutoMinigame = MiscTab:CreateToggle({
    Name = "Auto Minigame",
    CurrentValue = false,
    Flag = "autoMinigameToggle",
    Callback = function(Value)
        _G.autoMinigameEnabled = Value
    end,
})

-- No Fall
local NoFall = MiscTab:CreateToggle({
    Name = "No Fall",
    CurrentValue = false,
    Flag = "noFallToggle",
    Callback = function(Value)
        _G.noFallEnabled = Value
    end,
})

-- Fast Jump
local FastJump = MiscTab:CreateToggle({
    Name = "Fast Jump",
    CurrentValue = false,
    Flag = "fastJumpToggle",
    Callback = function(Value)
        _G.fastJumpEnabled = Value
    end,
})

-- Anti Ragdoll
local AntiRagdoll = MiscTab:CreateToggle({
    Name = "Anti Ragdoll",
    CurrentValue = false,
    Flag = "antiRagdollToggle",
    Callback = function(Value)
        _G.antiRagdollEnabled = Value
    end,
})

-- Settings Tab
local SettingsTab = Window:CreateTab("‚öôÔ∏è Settings", nil)
local SettingsSection = SettingsTab:CreateSection("Script Settings")

local DestroyUI = SettingsTab:CreateButton({
   Name = "Destroy UI",
   Callback = function()
      cleanupESP()
      Rayfield:Destroy()
   end,
})

-- Credits Section
local CreditsSection = SettingsTab:CreateSection("Credits")
local CreditsLabel = SettingsTab:CreateLabel("Created by: DogTeam")
local VersionLabel = SettingsTab:CreateLabel("Version: 1.0.0")
