local Players = game:service("Players")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "🐕 DOG HUB | Universal",
   LoadingTitle = "DOG HUB",
   LoadingSubtitle = "by DogTeam",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil,
      FileName = "DogHub"
   },
   Discord = {
      Enabled = true,
      Invite = "rQ5duuF8",
      RememberJoins = true
   },
   KeySystem = true,
   KeySettings = {
      Title = "Key | DOG HUB",
      Subtitle = "Key System",
      Note = "Key In Discord Server",
      FileName = "DogHubKey1",
      SaveKey = true, -- เปิดการบันทึก key
      GrabKeyFromSite = true, -- ดึง key จาก pastebin
      Key = {"https://pastebin.com/raw/RPdkB92x"} -- ลิงก์ pastebin แบบ raw
   }
})

-- Welcome Notification
Rayfield:Notify({
  Title = "Welcome to DOG HUB!",
  Content = "Script loaded successfully",
  Duration = 6.5,
  Image = nil,
  Actions = {
     Ignore = {
        Name = "Okay!",
        Callback = function()
           print("Notification acknowledged")
        end
     },
  },
})

-- Welcome Notification
Rayfield:Notify({
   Title = "Welcome to DOG HUB!",
   Content = "Script loaded successfully",
   Duration = 6.5,
   Image = nil,
   Actions = {
      Ignore = {
         Name = "Okay!",
         Callback = function()
            print("Notification acknowledged")
         end
      },
   },
})


-- Combat Tab
local CombatTab = Window:CreateTab("⚔️ Combat", nil)
local AimbotSection = CombatTab:CreateSection("Aimbot Settings")

-- Services
local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local Player = Players.LocalPlayer

-- ตัวแปรสำหรับ Aimbot
local aimbotEnabled = false
local wallCheckEnabled = false
local targetBody = false
local FOVSize = 100
local smoothness = 0.2
local predictionMultiplier = 0.15

-- สร้าง FOV Circle
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.NumSides = 64
FOVCircle.Color = Color3.fromRGB(255, 255, 255)
FOVCircle.Transparency = 0.7
FOVCircle.Filled = false
FOVCircle.Visible = false

-- ฟังก์ชันตรวจสอบว่ามองเห็นเป้าหมายได้หรือไม่
local function canSeeTarget(targetPart)
    local origin = Camera.CFrame.Position
    local direction = (targetPart.Position - origin).Unit * 500 -- กำหนดระยะทางสูงสุดตามที่ต้องการ
    local ray = Ray.new(origin, direction)
    local hit, position = workspace:FindPartOnRay(ray, Player.Character, false, true)
    
    return hit and hit:IsDescendantOf(targetPart.Parent)
end

-- ฟังก์ชันหาผู้เล่นที่ใกล้เม้าส์ที่สุด
local function getClosestToCenter()
    local closestPlayer = nil
    local shortestDistance = FOVSize
    local mousePos = UIS:GetMouseLocation()
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Player then
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") and
               character.Humanoid.Health > 0 then
                
                local targetPart = targetBody and 
                    character:FindFirstChild("HumanoidRootPart") or
                    character:FindFirstChild("Head")
                
                if targetPart then
                    local screenPoint, onScreen = Camera:WorldToScreenPoint(targetPart.Position)
                    
                    if onScreen and screenPoint.Z > 0 then
                        local screenPosition = Vector2.new(screenPoint.X, screenPoint.Y)
                        local distanceFromMouse = (screenPosition - mousePos).Magnitude
                        
                        if distanceFromMouse <= FOVSize then
                            if distanceFromMouse < shortestDistance then
                                if not wallCheckEnabled or canSeeTarget(targetPart) then
                                    closestPlayer = player
                                    shortestDistance = distanceFromMouse
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    return closestPlayer
end

-- Toggle Aimbot Button
local AimbotToggle = CombatTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Flag = "AimbotEnabled",
    Callback = function(Value)
        aimbotEnabled = Value
        FOVCircle.Visible = Value
    end
})

-- Wall Check Toggle
local WallCheckToggle = CombatTab:CreateToggle({
    Name = "Wall Check",
    CurrentValue = false,
    Flag = "WallCheck",
    Callback = function(Value)
        wallCheckEnabled = Value
    end
})

-- Target Part Toggle
local TargetPartToggle = CombatTab:CreateToggle({
    Name = "Target Body",
    CurrentValue = false,
    Flag = "TargetBody",
    Callback = function(Value)
        targetBody = Value
    end
})

-- FOV Size Slider
local FOVSlider = CombatTab:CreateSlider({
    Name = "FOV Size",
    Range = {10, 800},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 100,
    Flag = "FOVSize",
    Callback = function(Value)
        FOVSize = Value
        FOVCircle.Radius = Value
    end
})

-- Smoothness Slider
local SmoothnessSlider = CombatTab:CreateSlider({
    Name = "Smoothness",
    Range = {0.01, 1},
    Increment = 0.01,
    Suffix = "x",
    CurrentValue = 0.2,
    Flag = "Smoothness",
    Callback = function(Value)
        smoothness = Value
    end
})

-- Prediction Slider
local PredictionSlider = CombatTab:CreateSlider({
    Name = "Prediction",
    Range = {0, 2},
    Increment = 0.01,
    Suffix = "x",
    CurrentValue = 0.15,
    Flag = "Prediction",
    Callback = function(Value)
        predictionMultiplier = Value
    end
})

-- Main Aimbot Loop
RS.RenderStepped:Connect(function()
    if FOVCircle then
        FOVCircle.Position = UIS:GetMouseLocation()
        FOVCircle.Radius = FOVSize
    end
    
    if aimbotEnabled and UIS:IsMouseButtonPressed(Enum.UserInputType.MouseButton2) then
        local target = getClosestToCenter()
        if target then
            local targetPart = targetBody and 
                target.Character:FindFirstChild("HumanoidRootPart") or
                target.Character:FindFirstChild("Head")
            
            if targetPart then
                local targetPos = targetPart.Position
                local targetVel = targetPart.Velocity
                
                -- คำนวณการ Prediction
                targetPos = targetPos + (targetVel * predictionMultiplier)
                
                -- ล็อกเป้าหมาย
                local targetCFrame = CFrame.lookAt(Camera.CFrame.Position, targetPos)
                Camera.CFrame = Camera.CFrame:Lerp(targetCFrame, smoothness)
            end
        end
    end
end)

-- ESP Tab
local ESPTab = Window:CreateTab("👁 ESP", nil)
local ESPSection = ESPTab:CreateSection("ESP Features")

-- ESP Variables and Colors
local espEnabled = false
local espDistance = 1000
local espTextSize = 12
local highlightColor = Color3.fromRGB(255, 255, 255)
local fillColor = Color3.fromRGB(255, 0, 0)

-- Create ESP Storage
local espFolder = Instance.new("Folder")
espFolder.Name = "ESPStorage"
espFolder.Parent = game.CoreGui

-- ESP Functions
local function createNameTag(player)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Name"
    billboard.Size = UDim2.new(0, 150, 0, 60)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.MaxDistance = espDistance

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    nameLabel.TextSize = espTextSize
    nameLabel.Font = Enum.Font.GothamBold
    nameLabel.Parent = billboard

    local hpLabel = Instance.new("TextLabel")
    hpLabel.Name = "HPLabel"
    hpLabel.Size = UDim2.new(1, 0, 0.5, 0)
    hpLabel.Position = UDim2.new(0, 0, 0.5, 0)
    hpLabel.BackgroundTransparency = 1
    hpLabel.TextColor3 = Color3.new(1, 1, 1)
    hpLabel.TextStrokeTransparency = 0
    hpLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    hpLabel.TextSize = espTextSize
    hpLabel.Font = Enum.Font.GothamBold
    hpLabel.Parent = billboard

    local function updateHP()
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChild("Humanoid")
            if humanoid then
                local hp = math.floor((humanoid.Health / humanoid.MaxHealth) * 100)
                hpLabel.Text = hp .. "%"
                
                if hp > 75 then
                    hpLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                elseif hp > 50 then
                    hpLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
                elseif hp > 25 then
                    hpLabel.TextColor3 = Color3.fromRGB(255, 125, 0)
                else
                    hpLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                end
            end
        end
    end

    if player.Character then
        local humanoid = player.Character:FindFirstChild("Humanoid")
        if humanoid then
            updateHP()
            humanoid.HealthChanged:Connect(updateHP)
        end
    end

    return billboard
end

local function createChams(character)
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.FillColor = fillColor
    highlight.OutlineColor = highlightColor
    highlight.FillTransparency = 0.8
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.Parent = espFolder
    highlight.Adornee = character

    local player = game:GetService("Players"):GetPlayerFromCharacter(character)
    if player then
        local nameTag = createNameTag(player)
        nameTag.Parent = character:WaitForChild("Head")
    end
end

local function updateESP()
    if espEnabled then
        for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game:GetService("Players").LocalPlayer then
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    local hasESP = false
                    if player.Character:FindFirstChild("Head") then
                        hasESP = player.Character.Head:FindFirstChild("ESP_Name") ~= nil
                    end
                    
                    if not hasESP then
                        createChams(player.Character)
                    end
                end
            end
        end
    end
end


local ESPToggle = ESPTab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = false,
    Flag = "PlayerESPToggle",
    Callback = function(Value)
        espEnabled = Value
        if Value then
            updateESP()
            game:GetService("RunService").RenderStepped:Connect(function()
                if espEnabled then
                    updateESP()
                end
            end)
        else
            for _, highlight in pairs(espFolder:GetChildren()) do
                highlight:Destroy()
            end
            
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player ~= game:GetService("Players").LocalPlayer and player.Character then
                    local head = player.Character:FindFirstChild("Head")
                    if head then
                        local nameTag = head:FindFirstChild("ESP_Name")
                        if nameTag then
                            nameTag:Destroy()
                        end
                    end
                end
            end
        end
    end,
})


-- Global variables for ESP states
_G.espEnabled = false
_G.radarEnabled = false
_G.arrowsEnabled = false
_G.skeletonEnabled = false


-- Function to cleanup specific ESP feature
local function CleanupESP(espType)
    if espType == "skeleton" then
        if _G.Skeletons then
            for _, skeleton in pairs(_G.Skeletons) do
                pcall(function() skeleton:Remove() end)
            end
            _G.Skeletons = nil
        end
    elseif espType == "arrows" then
        if _G.ArrowsObjects then
            for _, arrow in pairs(_G.ArrowsObjects) do
                pcall(function() arrow:Remove() end)
            end
            _G.ArrowsObjects = nil
        end
    elseif espType == "radar" then
        if _G.RadarObjects then
            for _, obj in pairs(_G.RadarObjects) do
                pcall(function() obj:Remove() end)
            end
            _G.RadarObjects = nil
        end
    end
end


-- Skeleton ESP
local SkeletonToggle = ESPTab:CreateToggle({
    Name = "Skeleton ESP",
    CurrentValue = false,
    Flag = "skeletonToggle",
    Callback = function(Value)
        if Value then
            if _G.skeletonEnabled then
                CleanupESP("skeleton")
            end
            _G.skeletonEnabled = true
            
            -- Load the skeleton library
            local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Blissful4992/ESPs/main/UniversalSkeleton.lua"))()
            _G.Skeletons = {}
            
            -- Create skeletons for existing players
            for _, plr in next, Players:GetChildren() do
                if plr ~= Player then
                    table.insert(_G.Skeletons, Library:NewSkeleton(plr, true))
                end
            end
            
            -- Create skeletons for new players
            Players.PlayerAdded:Connect(function(plr)
                if _G.skeletonEnabled and plr ~= Player then
                    table.insert(_G.Skeletons, Library:NewSkeleton(plr, true))
                end
            end)
        else
            _G.skeletonEnabled = false
            if _G.Skeletons then
                for _, skeleton in pairs(_G.Skeletons) do
                    pcall(function() skeleton:Remove() end)
                end
                _G.Skeletons = nil
            end
        end
    end,
})


-- Arrows ESP
local ArrowsToggle = ESPTab:CreateToggle({
    Name = "Arrows ESP",
    CurrentValue = false,
    Flag = "arrowsToggle",
    Callback = function(Value)
        if Value then
            if _G.arrowsEnabled then
                CleanupESP("arrows")
            end
            _G.arrowsEnabled = true
            _G.ArrowsObjects = {}
            
            -- Arrows Configuration
            local DistFromCenter = 80
            local TriangleHeight = 16
            local TriangleWidth = 16
            local TriangleFilled = true
            local TriangleTransparency = 0
            local TriangleThickness = 1
            local TriangleColor = Color3.fromRGB(255, 255, 255)
            local AntiAliasing = false

            -- Arrow Functions
            local function GetRelative(pos, char)
                if not char then return Vector2.new(0,0) end
                local rootP = char.PrimaryPart.Position
                local camP = Camera.CFrame.Position
                local relative = CFrame.new(Vector3.new(rootP.X, camP.Y, rootP.Z), camP):PointToObjectSpace(pos)
                return Vector2.new(relative.X, relative.Z)
            end

            local function RelativeToCenter(v)
                return Camera.ViewportSize/2 - v
            end

            local function RotateVect(v, a)
                a = math.rad(a)
                local x = v.x * math.cos(a) - v.y * math.sin(a)
                local y = v.x * math.sin(a) + v.y * math.cos(a)
                return Vector2.new(x, y)
            end

            local function DrawTriangle(color)
                local l = Drawing.new("Triangle")
                l.Visible = false
                l.Color = color
                l.Filled = TriangleFilled
                l.Thickness = TriangleThickness
                l.Transparency = 1-TriangleTransparency
                return l
            end

            local function AntiA(v)
                if (not AntiAliasing) then return v end
                return Vector2.new(math.round(v.x), math.round(v.y))
            end

            local function ShowArrow(PLAYER)
                local Arrow = DrawTriangle(TriangleColor)
                table.insert(_G.ArrowsObjects, Arrow)
                
                local function Update()
                    local c
                    c = RS.RenderStepped:Connect(function()
                        if not _G.arrowsEnabled then
                            Arrow.Visible = false
                            c:Disconnect()
                            return
                        end
                        
                        if PLAYER and PLAYER.Character then
                            local CHAR = PLAYER.Character
                            local HUM = CHAR:FindFirstChildOfClass("Humanoid")
                            if HUM and CHAR.PrimaryPart ~= nil and HUM.Health > 0 then
                                local _,vis = Camera:WorldToViewportPoint(CHAR.PrimaryPart.Position)
                                if vis == false then
                                    local rel = GetRelative(CHAR.PrimaryPart.Position, Player.Character)
                                    local direction = rel.Unit
                                    local base = direction * DistFromCenter
                                    local sideLength = TriangleWidth/2
                                    local baseL = base + RotateVect(direction, 90) * sideLength
                                    local baseR = base + RotateVect(direction, -90) * sideLength
                                    local tip = direction * (DistFromCenter + TriangleHeight)
                                    
                                    Arrow.PointA = AntiA(RelativeToCenter(baseL))
                                    Arrow.PointB = AntiA(RelativeToCenter(baseR))
                                    Arrow.PointC = AntiA(RelativeToCenter(tip))
                                    Arrow.Visible = true
                                else 
                                    Arrow.Visible = false 
                                end
                            else 
                                Arrow.Visible = false 
                            end
                        else 
                            Arrow.Visible = false
                            if not PLAYER or not PLAYER.Parent then
                                Arrow:Remove()
                                c:Disconnect()
                            end
                        end
                    end)
                end
                coroutine.wrap(Update)()
            end

            -- Create arrows for existing players
            for _,v in pairs(Players:GetChildren()) do
                if v.Name ~= Player.Name then
                    ShowArrow(v)
                end
            end

            -- Create arrows for new players
            Players.PlayerAdded:Connect(function(v)
                if _G.arrowsEnabled and v.Name ~= Player.Name then
                    ShowArrow(v)
                end
            end)
        else
            _G.arrowsEnabled = false
            if _G.ArrowsObjects then
                for _, arrow in pairs(_G.ArrowsObjects) do
                    pcall(function() arrow:Remove() end)
                end
                _G.ArrowsObjects = nil
            end
        end
    end,
})

-- Radar ESP
local RadarToggle = ESPTab:CreateToggle({
    Name = "Radar ESP",
    CurrentValue = false,
    Flag = "radarToggle",
    Callback = function(Value)
        if Value then
            if _G.radarEnabled then
                CleanupESP("radar")
            end
            _G.radarEnabled = true
            
            -- Load LerpColorModule for health colors
            local LerpColorModule = loadstring(game:HttpGet("https://pastebin.com/raw/wRnsJeid"))()
            local HealthBarLerp = LerpColorModule:Lerp(Color3.fromRGB(255, 0, 0), Color3.fromRGB(0, 255, 0))
            
            -- Radar Configuration
            local RadarInfo = {
                Position = Vector2.new(200, 200),
                Radius = 100,
                Scale = 1,
                RadarBack = Color3.fromRGB(10, 10, 10),
                RadarBorder = Color3.fromRGB(75, 75, 75),
                LocalPlayerDot = Color3.fromRGB(255, 255, 255),
                PlayerDot = Color3.fromRGB(60, 170, 255),
                Team = Color3.fromRGB(0, 255, 0),
                Enemy = Color3.fromRGB(255, 0, 0),
                Health_Color = true,
                Team_Check = true
            }
            
            _G.RadarObjects = {}

            local function NewCircle(Transparency, Color, Radius, Filled, Thickness)
                local c = Drawing.new("Circle")
                c.Transparency = Transparency
                c.Color = Color
                c.Visible = false
                c.Thickness = Thickness
                c.Position = Vector2.new(0, 0)
                c.Radius = Radius
                c.NumSides = math.clamp(Radius*55/100, 10, 75)
                c.Filled = Filled
                table.insert(_G.RadarObjects, c)
                return c
            end

            local RadarBackground = NewCircle(0.9, RadarInfo.RadarBack, RadarInfo.Radius, true, 1)
            RadarBackground.Visible = true
            RadarBackground.Position = RadarInfo.Position

            local RadarBorder = NewCircle(0.75, RadarInfo.RadarBorder, RadarInfo.Radius, false, 3)
            RadarBorder.Visible = true
            RadarBorder.Position = RadarInfo.Position

            local function GetRelative(pos)
                local char = Player.Character
                if char ~= nil and char.PrimaryPart ~= nil then
                    local pmpart = char.PrimaryPart
                    local camerapos = Vector3.new(Camera.CFrame.Position.X, pmpart.Position.Y, Camera.CFrame.Position.Z)
                    local newcf = CFrame.new(pmpart.Position, camerapos)
                    local r = newcf:PointToObjectSpace(pos)
                    return r.X, r.Z
                else
                    return 0, 0
                end
            end

            local function PlaceDot(plr)
                local PlayerDot = NewCircle(1, RadarInfo.PlayerDot, 3, true, 1)
                local function Update()
                    local c 
                    c = RS.RenderStepped:Connect(function()
                        if not _G.radarEnabled then
                            PlayerDot.Visible = false
                            c:Disconnect()
                            return
                        end

                        local char = plr.Character
                        if char and char:FindFirstChildOfClass("Humanoid") and char.PrimaryPart ~= nil and char:FindFirstChildOfClass("Humanoid").Health > 0 then
                            local hum = char:FindFirstChildOfClass("Humanoid")
                            local scale = RadarInfo.Scale
                            local relx, rely = GetRelative(char.PrimaryPart.Position)
                            local newpos = RadarInfo.Position - Vector2.new(relx * scale, rely * scale) 
                            
                            if (newpos - RadarInfo.Position).magnitude < RadarInfo.Radius-2 then 
                                PlayerDot.Radius = 3   
                                PlayerDot.Position = newpos
                                PlayerDot.Visible = true
                            else 
                                local dist = (RadarInfo.Position - newpos).magnitude
                                local calc = (RadarInfo.Position - newpos).unit * (dist - RadarInfo.Radius)
                                local inside = Vector2.new(newpos.X + calc.X, newpos.Y + calc.Y)
                                PlayerDot.Radius = 2
                                PlayerDot.Position = inside
                                PlayerDot.Visible = true
                            end

                            PlayerDot.Color = RadarInfo.PlayerDot
                            if RadarInfo.Team_Check then
                                if plr.TeamColor == Player.TeamColor then
                                    PlayerDot.Color = RadarInfo.Team
                                else
                                    PlayerDot.Color = RadarInfo.Enemy
                                end
                            end

                            if RadarInfo.Health_Color then
                                PlayerDot.Color = HealthBarLerp(hum.Health / hum.MaxHealth)
                            end
                        else 
                            PlayerDot.Visible = false
                            if Players:FindFirstChild(plr.Name) == nil then
                                PlayerDot:Remove()
                                c:Disconnect()
                            end
                        end
                    end)
                end
                coroutine.wrap(Update)()
            end

            for _,v in pairs(Players:GetChildren()) do
                if v.Name ~= Player.Name then
                    PlaceDot(v)
                end
            end

            local function NewLocalDot()
                local d = Drawing.new("Triangle")
                d.Visible = true
                d.Thickness = 1
                d.Filled = true
                d.Color = RadarInfo.LocalPlayerDot
                d.PointA = RadarInfo.Position + Vector2.new(0, -6)
                d.PointB = RadarInfo.Position + Vector2.new(-3, 6)
                d.PointC = RadarInfo.Position + Vector2.new(3, 6)
                table.insert(_G.RadarObjects, d)
                return d
            end

            local LocalPlayerDot = NewLocalDot()

            Players.PlayerAdded:Connect(function(v)
                if _G.radarEnabled and v.Name ~= Player.Name then
                    PlaceDot(v)
                end
            end)

            -- Radar Update Loop
            coroutine.wrap(function()
                local c 
                c = RS.RenderStepped:Connect(function()
                    if not _G.radarEnabled then
                        c:Disconnect()
                        return
                    end
                    
                    if LocalPlayerDot ~= nil then
                        LocalPlayerDot.Color = RadarInfo.LocalPlayerDot
                        LocalPlayerDot.PointA = RadarInfo.Position + Vector2.new(0, -6)
                        LocalPlayerDot.PointB = RadarInfo.Position + Vector2.new(-3, 6)
                        LocalPlayerDot.PointC = RadarInfo.Position + Vector2.new(3, 6)
                    end
                    RadarBackground.Position = RadarInfo.Position
                    RadarBackground.Radius = RadarInfo.Radius
                    RadarBackground.Color = RadarInfo.RadarBack

                    RadarBorder.Position = RadarInfo.Position
                    RadarBorder.Radius = RadarInfo.Radius
                    RadarBorder.Color = RadarInfo.RadarBorder
                end)
            end)()

            -- Draggable Functionality
            local inset = game:service("GuiService"):GetGuiInset()
            local dragging = false
            local offset = Vector2.new(0, 0)
            
            UIS.InputBegan:Connect(function(input)
                if not _G.radarEnabled then return end
                if input.UserInputType == Enum.UserInputType.MouseButton1 and (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
                    offset = RadarInfo.Position - Vector2.new(Mouse.X, Mouse.Y)
                    dragging = true
                end
            end)

            UIS.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = false
                end
            end)

            coroutine.wrap(function()
                local dot = NewCircle(1, Color3.fromRGB(255, 255, 255), 3, true, 1)
                local c 
                c = RS.RenderStepped:Connect(function()
                    if not _G.radarEnabled then
                        c:Disconnect()
                        return
                    end
                    
                    if (Vector2.new(Mouse.X, Mouse.Y + inset.Y) - RadarInfo.Position).magnitude < RadarInfo.Radius then
                        dot.Position = Vector2.new(Mouse.X, Mouse.Y + inset.Y)
                        dot.Visible = true
                    else 
                        dot.Visible = false
                    end
                    if dragging then
                        RadarInfo.Position = Vector2.new(Mouse.X, Mouse.Y) + offset
                    end
                end)
            end)()
        else
            _G.radarEnabled = false
            if _G.RadarObjects then
                for _, obj in pairs(_G.RadarObjects) do
                    pcall(function() obj:Remove() end)
                end
                _G.RadarObjects = nil
            end
        end
    end,
})

-- Misc Tab
local MiscTab = Window:CreateTab("🛠 Misc", nil)
local MiscSection = MiscTab:CreateSection("Misc Features")

-- Create variables to track script state
getgenv().ScriptLoaded = false
getgenv().ESPEnabled = false
getgenv().ESPLoop = false  -- ตัวแปรควบคุมการทำงานแบบวนซ้ำ


-- Function to force remove ESP
local function ForceRemoveESP()
    -- Remove main GUI
    local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
    if playerGui then
        local espGui = playerGui:FindFirstChild("WeaponESP")
        if espGui then
            espGui:Destroy()
        end
    end
    
    -- Remove all weapon labels
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player.Character then
            local head = player.Character:FindFirstChild("Head")
            if head then
                local weaponLabel = head:FindFirstChild("WeaponLabel")
                if weaponLabel then
                    weaponLabel:Destroy()
                end
            end
        end
    end
    
    -- Clear all variables
    local varsToCheck = {
        "weaponLabels",
        "settings",
        "uiVisible",
        "gui",
        "controlPanel",
        "ESPEnabled",
        "ScriptLoaded"
    }
    
    for _, varName in ipairs(varsToCheck) do
        if _G[varName] then _G[varName] = nil end
        if getgenv()[varName] then getgenv()[varName] = nil end
    end
    
    -- Disconnect all connections
    if getgenv().ESPConnections then
        for _, connection in pairs(getgenv().ESPConnections) do
            if typeof(connection) == "RBXScriptConnection" and connection.Connected then
                connection:Disconnect()
            end
        end
        getgenv().ESPConnections = {}
    end
end

-- Create DestroyESP function
getgenv().DestroyESP = function()
    pcall(function()
        ForceRemoveESP()
        -- Try to remove main GUI again after a small delay
        task.wait(0.1)
        local playerGui = game:GetService("Players").LocalPlayer:FindFirstChild("PlayerGui")
        if playerGui then
            for _, gui in pairs(playerGui:GetChildren()) do
                if gui.Name == "WeaponESP" then
                    gui:Destroy()
                end
            end
        end
    end)
end

-- Create Load Button
local LoadButton = MiscTab:CreateButton({
    Name = "Load ESP",
    Callback = function()
        -- First, destroy any existing ESP
        if getgenv().DestroyESP then
            getgenv().DestroyESP()
            task.wait(0.2)
        end
        
        local success, error = pcall(function()
            getgenv().ScriptLoaded = true
            getgenv().ESPEnabled = true
            
            -- Load ESP Script
            loadstring(game:HttpGet("https://raw.githubusercontent.com/ADMINDOGG/PROJECT-DOGHUB/refs/heads/main/ESP%20WAP%20FOR%20DOGHUB"))()
        end)
        
        if not success then
            warn("Load ESP Error: " .. tostring(error))
            if getgenv().DestroyESP then
                getgenv().DestroyESP()
            end
        end
    end,
})

-- Create Stop Button
local StopButton = MiscTab:CreateButton({
    Name = "Stop ESP",
    Callback = function()
        if getgenv().DestroyESP then
            getgenv().DestroyESP()
        end
    end,
})
-- Auto Loot
local AutoLoot = MiscTab:CreateToggle({
    Name = "Auto Loot",
    CurrentValue = false,
    Flag = "autoLootToggle",
    Callback = function(Value)
        _G.autoLootEnabled = Value
        if Value then
            local Events = game:GetService("ReplicatedStorage"):WaitForChild("Events")
            local Loot = Events:WaitForChild("Loot")
            local LootEvent = Loot:WaitForChild("LootObject")
            
            -- Loot Functions
            local function hasRemainingLoot(lootTable)
                if not lootTable then return false end
                if (lootTable:GetAttribute("Cash") or 0) > 0 then return true end
                if (lootTable:GetAttribute("Valuables") or 0) > 0 then return true end
                for _, item in pairs(lootTable:GetChildren()) do
                    if item:IsA("NumberValue") and item.Value > 0 then
                        return true
                    end
                end
                return false
            end

            local function lootEverything(lootTable)
                if not lootTable or _G.currentlyLooting then return end
                _G.currentlyLooting = true
                
                while hasRemainingLoot(lootTable) and _G.autoLootEnabled do
                    if (lootTable:GetAttribute("Cash") or 0) > 0 then
                        LootEvent:FireServer(lootTable, "Cash")
                        task.wait(0.1)
                    end
                    
                    if (lootTable:GetAttribute("Valuables") or 0) > 0 then
                        LootEvent:FireServer(lootTable, "Valuables")
                        task.wait(0.1)
                    end
                    
                    for _, item in pairs(lootTable:GetChildren()) do
                        if item:IsA("NumberValue") and item.Value > 0 then
                            LootEvent:FireServer(lootTable, item)
                            task.wait(0.1)
                        end
                    end
                    task.wait(0.2)
                end
                _G.currentlyLooting = false
            end

            LootEvent.OnClientEvent:Connect(function(lootTable)
                if _G.autoLootEnabled and lootTable then
                    task.wait(0.1)
                    lootEverything(lootTable)
                end
            end)
        end
    end,
})
-- Auto Minigame
local AutoMinigame = MiscTab:CreateToggle({
    Name = "Auto Minigame",
    CurrentValue = false,
    Flag = "autoMinigameToggle",
    Callback = function(Value)
        _G.autoMinigameEnabled = Value
        if Value then
            local Events = game:GetService("ReplicatedStorage"):WaitForChild("Events")
            Events.Loot.Minigame.OnClientEvent:Connect(function(instance)
                if _G.autoMinigameEnabled then
                    task.wait(math.random(0.1, 0.3))
                    Events.Loot.MinigameResult:FireServer(instance, true)
                end
            end)
        end
    end,
})

-- No Fall
local NoFall = MiscTab:CreateToggle({
    Name = "No Fall",
    CurrentValue = false,
    Flag = "noFallToggle",
    Callback = function(Value)
        _G.noFallEnabled = Value
        if Value then
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local old = mt.__namecall
            
            mt.__namecall = newcclosure(function(self, ...)
                local method = getnamecallmethod()
                local args = {...}
                
                if _G.noFallEnabled and method == "FireServer" and (self.Name == "Damage" or self.Name == "Ragdoll") then
                    return
                end
                
                return old(self, ...)
            end)
        end
    end,
})

-- Fast Jump
local FastJump = MiscTab:CreateToggle({
    Name = "Fast Jump",
    CurrentValue = false,
    Flag = "fastJumpToggle",
    Callback = function(Value)
        _G.fastJumpEnabled = Value
        _G.canJump = true
        _G.lastJumpTime = 0
        
        if Value then
            game:GetService("UserInputService").JumpRequest:Connect(function()
                if _G.fastJumpEnabled then
                    local character = game.Players.LocalPlayer.Character
                    if not character then return end
                    
                    local humanoid = character:FindFirstChild("Humanoid")
                    if not humanoid then return end
                    
                    if humanoid.FloorMaterial ~= Enum.Material.Air and _G.canJump then
                        local currentTime = tick()
                        if currentTime - _G.lastJumpTime > 0.1 then
                            _G.lastJumpTime = currentTime
                            _G.canJump = false
                            
                            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                            
                            task.wait(0.1)
                            _G.canJump = true
                        end
                    end
                end
            end)
        end
    end,
})

-- Anti Ragdoll
local AntiRagdoll = MiscTab:CreateToggle({
    Name = "Anti Ragdoll",
    CurrentValue = false,
    Flag = "antiRagdollToggle",
    Callback = function(Value)
        _G.antiRagdollEnabled = Value
        if Value then
            _G.Ragdolled = false
            
            local mt = getrawmetatable(game)
            setreadonly(mt, false)
            local old = mt.__namecall
            
            mt.__namecall = newcclosure(function(self, ...)
                local method = getnamecallmethod()
                local args = {...}
                
                if _G.antiRagdollEnabled and method == "FireServer" and self.Name == "Ragdoll" then
                    return
                end
                
                return old(self, ...)
            end)
        end
    end,
})

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local plr = Players.LocalPlayer

-- Functions
local function startSpectating(player)
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") then
        workspace.CurrentCamera.CameraSubject = character
        return "Spectating " .. character.Name
    end
    return "Invalid player"
end

local function stopSpectating()
    if plr.Character and plr.Character:FindFirstChild("Humanoid") then
        workspace.CurrentCamera.CameraSubject = plr.Character
    end
end

-- Spectating Button in Rayfield UI
local AdditionalFunctionsTab = Window:CreateTab("🛠 Additional Functions", nil)
local AdditionalFunctionsSection = AdditionalFunctionsTab:CreateSection("Additional Features")

-- State variable for toggling GUI
local isSpectateGuiOpen = false

-- Spectating Button
local SpectateButton = AdditionalFunctionsTab:CreateButton({
   Name = "Spectating",
   Callback = function()
      if isSpectateGuiOpen then
          if spectateGui then
              spectateGui:Destroy()
              isSpectateGuiOpen = false
          end
      else
          -- UI for selecting players to spectate
          spectateGui = Instance.new("ScreenGui")
          spectateGui.Name = "SpectateGui"
          spectateGui.ResetOnSpawn = false
          spectateGui.Parent = game.CoreGui

          local mainFrame = Instance.new("Frame")
          mainFrame.Size = UDim2.new(0, 200, 0, 300)
          mainFrame.Position = UDim2.new(0.85, -100, 0.3, 0)
          mainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
          mainFrame.BorderSizePixel = 0
          mainFrame.Active = true
          mainFrame.Draggable = true
          mainFrame.Parent = spectateGui

          local titleLabel = Instance.new("TextLabel")
          titleLabel.Parent = mainFrame
          titleLabel.Size = UDim2.new(1, 0, 0.15, 0)
          titleLabel.Text = "👁️ Spectate"
          titleLabel.TextSize = 24
          titleLabel.Font = Enum.Font.GothamBold
          titleLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
          titleLabel.BackgroundTransparency = 1

          local scrollFrame = Instance.new("ScrollingFrame")
          scrollFrame.Size = UDim2.new(0.9, 0, 0.7, 0)
          scrollFrame.Position = UDim2.new(0.05, 0, 0.2, 0)
          scrollFrame.BackgroundTransparency = 1
          scrollFrame.ScrollBarThickness = 4
          scrollFrame.Parent = mainFrame

          local stopButton = Instance.new("TextButton")
          stopButton.Size = UDim2.new(0.8, 0, 0.1, 0)
          stopButton.Position = UDim2.new(0.1, 0, 0.88, 0)
          stopButton.Text = "Stop Spectating"
          stopButton.TextColor3 = Color3.fromRGB(255, 255, 255)
          stopButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
          stopButton.Font = Enum.Font.GothamBold
          stopButton.TextSize = 14
          stopButton.Parent = mainFrame
          stopButton.Visible = false

          stopButton.MouseButton1Click:Connect(function()
              stopSpectating()
              stopButton.Visible = false
          end)

          local function updatePlayerList()
              for _, child in ipairs(scrollFrame:GetChildren()) do
                  if child:IsA("TextButton") then
                      child:Destroy()
                  end
              end
              
              for _, player in ipairs(Players:GetPlayers()) do
                  if player ~= plr then
                      local button = Instance.new("TextButton")
                      button.Size = UDim2.new(0.9, 0, 0, 30)
                      button.Position = UDim2.new(0.05, 0, 0, (#scrollFrame:GetChildren() * 35))
                      button.Text = player.Name
                      button.TextColor3 = Color3.fromRGB(255, 255, 255)
                      button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                      button.Font = Enum.Font.GothamSemibold
                      button.TextSize = 14
                      button.Parent = scrollFrame

                      button.MouseButton1Click:Connect(function()
                          startSpectating(player)
                          stopButton.Visible = true
                      end)
                  end
              end
          end

          Players.PlayerAdded:Connect(updatePlayerList)
          Players.PlayerRemoving:Connect(updatePlayerList)
          updatePlayerList()

          -- Add keyboard shortcut (X key to stop spectating)
          UserInputService.InputBegan:Connect(function(input, gameProcessed)
              if not gameProcessed and input.KeyCode == Enum.KeyCode.X then
                  stopSpectating()
                  stopButton.Visible = false
              end
          end)

          isSpectateGuiOpen = true
      end
   end,
})
-- Open Chat Button in Rayfield UI
local TextChatService = game:GetService("TextChatService")

local OpenChatButton = AdditionalFunctionsTab:CreateButton({
   Name = "Open Chat",
   Callback = function()
      local chatWindowConfig = TextChatService:FindFirstChild("ChatWindowConfiguration")
      local isChatEnabled = true

      if chatWindowConfig then
          isChatEnabled = not chatWindowConfig.Enabled
          chatWindowConfig.Enabled = isChatEnabled

          return isChatEnabled and "Chat logs ENABLED!" or "Chat logs DISABLED!"
      end
   end,
})

-- Services
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
getgenv().Running = true

-- WalkSpeed
local SpeedToggle = MiscTab:CreateToggle({
    Name = "WalkSpeed",
    CurrentValue = false,
    Flag = "SpeedToggle",
    Callback = function(Value)
        _G.SpeedToggle = Value
        if Value then
            spawn(function()
                while _G.SpeedToggle and getgenv().Running do
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = _G.SpeedValue or 100
                    end
                    RunService.RenderStepped:Wait()
                end
            end)
        else
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
            end
        end
    end
})

MiscTab:CreateKeybind({
    Name = "WalkSpeed Key",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "SpeedKey",
    Callback = function()
        SpeedToggle:Set(not _G.SpeedToggle)
    end
})

MiscTab:CreateSlider({
    Name = "WalkSpeed Value",
    Range = {16, 500},
    Increment = 1,
    CurrentValue = 16,
    Flag = "SpeedValue",
    Callback = function(Value)
        _G.SpeedValue = Value
    end
})

-- JumpPower
local JumpToggle = MiscTab:CreateToggle({
    Name = "JumpPower",
    CurrentValue = false,
    Flag = "JumpToggle",
    Callback = function(Value)
        _G.JumpToggle = Value
        if Value then
            spawn(function()
                while _G.JumpToggle and getgenv().Running do
                    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                        game.Players.LocalPlayer.Character.Humanoid.JumpPower = _G.JumpValue or 100
                    end
                    RunService.RenderStepped:Wait()
                end
            end)
        else
            if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
            end
        end
    end
})

MiscTab:CreateKeybind({
    Name = "JumpPower Key",
    CurrentKeybind = "E",
    HoldToInteract = false,
    Flag = "JumpKey",
    Callback = function()
        JumpToggle:Set(not _G.JumpToggle)
    end
})

MiscTab:CreateSlider({
    Name = "JumpPower Value",
    Range = {50, 500},
    Increment = 1,
    CurrentValue = 50,
    Flag = "JumpValue",
    Callback = function(Value)
        _G.JumpValue = Value
    end
})

-- Config
local FLIGHT_SPEED = 50
local TOGGLE_KEY = Enum.KeyCode.L
local ASCEND_KEY = Enum.KeyCode.Space
local DESCEND_KEY = Enum.KeyCode.LeftShift

-- Flight Toggle Button
local FlightToggle = MiscTab:CreateToggle({
    Name = "🕊️ Flight (Press L)",
    CurrentValue = false,
    Flag = "FlightToggle",
    Callback = function(Value)
        flying = Value
        toggleFlight()
    end
})

-- Flight Speed Slider
local FlightSpeedSlider = MiscTab:CreateSlider({
    Name = "Flight Speed",
    Range = {10, 200}, -- กำหนดช่วงความเร็ว
    Increment = 5, -- เพิ่มทีละ 5
    CurrentValue = FLIGHT_SPEED, -- ค่าเริ่มต้น
    Flag = "FlightSpeedValue",
    Callback = function(Value)
        FLIGHT_SPEED = Value -- อัปเดตค่าความเร็วจริง
    end
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Player setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Variables
local flying = false
local camera = workspace.CurrentCamera
local humanoid, rootPart

local function getCharacter()
    character = player.Character or player.CharacterAdded:Wait()
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
end

local function updateFlight()
    if not flying or not rootPart then return end
    
    local moveDirection = Vector3.new(0, 0, 0)
    local lookVector = camera.CFrame.LookVector
    local rightVector = camera.CFrame.RightVector
    
    if UserInputService:IsKeyDown(Enum.KeyCode.W) then
        moveDirection = moveDirection + lookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.S) then
        moveDirection = moveDirection - lookVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.A) then
        moveDirection = moveDirection - rightVector
    end
    if UserInputService:IsKeyDown(Enum.KeyCode.D) then
        moveDirection = moveDirection + rightVector
    end
    if UserInputService:IsKeyDown(ASCEND_KEY) then
        moveDirection = moveDirection + Vector3.new(0, 1, 0)
    end
    if UserInputService:IsKeyDown(DESCEND_KEY) then
        moveDirection = moveDirection - Vector3.new(0, 1, 0)
    end
    
    if moveDirection.Magnitude > 0 then
        moveDirection = moveDirection.Unit * (FLIGHT_SPEED / 5) -- อัปเดตความเร็วแบบ Real-time
    end
    
    if rootPart then
        rootPart.CFrame = rootPart.CFrame + moveDirection
        rootPart.Velocity = Vector3.new(0, 0, 0)
    end
end

local function toggleFlight()
    if not humanoid or not rootPart then getCharacter() end
    flying = not flying
    
    if flying then
        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        rootPart.Velocity = Vector3.new(0, 0, 0)
    else
        humanoid:ChangeState(Enum.HumanoidStateType.Landing)
        task.wait(0.1)
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    end
end

-- Keybind to toggle flight
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == TOGGLE_KEY then
        FlightToggle:Set(not flying)
        toggleFlight()
    end
end)

-- Main loop
RunService.Heartbeat:Connect(function()
    if flying and rootPart then
        rootPart.Velocity = Vector3.new(0, 0, 0)
        updateFlight()
    end
end)

-- Character handling
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")
    rootPart = character:WaitForChild("HumanoidRootPart")
    
    if flying then
        task.wait(0.1)
        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        rootPart.Velocity = Vector3.new(0, 0, 0)
    end
end)

getCharacter()

-- Settings Tab
local SettingsTab = Window:CreateTab("⚙️ Settings", nil)
local SettingsSection = SettingsTab:CreateSection("Script Settings")

-- สวิตช์ Real Mouse (เปิดอัตโนมัติ)
SettingsTab:CreateToggle({
    Name = "+ Real Mouse",
    CurrentValue = true, -- เปลี่ยนเป็น true
    Flag = "RealMouse", 
    Callback = function(Value)
        if Value then
            local Mouse = game:GetService("Players").LocalPlayer:GetMouse()
            game:GetService("UserInputService").MouseIconEnabled = false
            
            local RealMouse = Instance.new("ImageLabel")
            RealMouse.Name = "RealMouse"
            RealMouse.Size = UDim2.new(0, 64, 0, 64)
            RealMouse.BackgroundTransparency = 1
            RealMouse.Image = "rbxassetid://7402429095"
            RealMouse.ZIndex = 10
            RealMouse.Parent = game.CoreGui
            
            game:GetService("RunService").RenderStepped:Connect(function()
                if RealMouse and RealMouse.Parent then
                    RealMouse.Position = UDim2.new(0, Mouse.X - 32, 0, Mouse.Y - 32)
                end
            end)
        else
            if game.CoreGui:FindFirstChild("RealMouse") then
                game.CoreGui.RealMouse:Destroy()
            end
            game:GetService("UserInputService").MouseIconEnabled = true
        end
    end    
})
-- เรียกใช้ฟังก์ชัน Callback ทันทีที่สคริปต์เริ่มทำงาน
task.spawn(function()
    if _G.RealMouse == nil then -- ตรวจสอบว่ายังไม่เคยตั้งค่า
        _G.RealMouse = true -- ตั้งค่าเริ่มต้นเป็น true
    end
end)

local DestroyUI = SettingsTab:CreateButton({
   Name = "Destroy UI",
   Callback = function()
      CleanupESP("skeleton")
      CleanupESP("arrows")
      CleanupESP("radar")
      Rayfield:Destroy()
   end,
})

-- Credits Section
local CreditsSection = SettingsTab:CreateSection("Credits")
local CreditsLabel = SettingsTab:CreateLabel("Created by: DogTeam")
local VersionLabel = SettingsTab:CreateLabel("Version: 1.3.1")
local user = SettingsTab:CreateLabel("user: Liusicong")
